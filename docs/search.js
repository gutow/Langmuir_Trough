window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "Trough", "modulename": "Trough", "kind": "module", "doc": "<h1 id=\"langmuir-trough\">Langmuir Trough</h1>\n\n<p>This software is a custom controller and GUI for the research Langmuir trough \nin the Gutow Lab at UW Oshkosh. It is written in Python and expects to run in a\nJupyter notebook environment. However, all of the parts that are not elements\nof the user interface should work in a vanilla Python environment.</p>\n\n<p>Hardware requirements:\nRaspberry Pi compatible system with a <a href=\"https://pi-plates.com/daqc2r1/\">Pi-Plates \nDAQC2</a> data acquisition plate \nand a trough controlled by the DAQC2 plate. This software could be used with \na trough controlled some other way by rewriting the routines in <code>trough_util.\npy</code>. The GUI front end would need no rewriting to use with a different \ntrough if a custom backend controlling the barriers, reading the temperature \nand Whilhelmy balance is written. The backend needs to continually monitor \nthe trough and respond to the following commands: <code>Stop, Send, Start, \nDirection, Speed, MoveTo, MotorCal, ConstPi, DataLabels, ShutDown</code>.</p>\n\n<p><strong>If you do not have compatible hardware the GUI will run with a simulated \ntrough, allowing you to see how it works.</strong></p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>Once installed:</p>\n\n<ol>\n<li>Turn on the power supply for the trough.</li>\n<li>In a terminal navigate to the directory containing the trough software.</li>\n<li>Start the virtual environment <code>pipenv shell</code>.</li>\n<li>Launch Jupyter <code>jupyter notebook</code> (<code>jupyter lab</code> also works and is now \nmore stable).</li>\n<li>Create a folder for the new day using the <strong>New</strong> menu near the top right \nof the Jupyter browser page. Give it an appropriate name.</li>\n<li>Switch to that folder by clicking on it.</li>\n<li>Start a new ipython notebook using the <strong>New</strong> menu. Give it a\nname that describes the experiment.</li>\n<li>In the first cell initialize the trough by running the command <code>from \nTrough import Trough_GUI</code>. This will take a while to run the first time \nit is run each day because it needs to check the movement of the barriers.</li>\n<li>To control and monitor the trough or do calibrations run the command \n<code>Trough_GUI.Controls(Trough_GUI.calibrations)</code></li>\n<li>Do not do any real runs without making sure the calibrations are correct.</li>\n<li>To start data collection (a run) run the command \n<code>Trough_GUI.Collect_data.Run(\"name_for_run\")</code>, \nwhere you replace name_for_run with the text for the name of the run (no \nspaces).</li>\n<li>Set the run conditions.</li>\n<li>You can start data collection by clicking the green \"Run\" button.</li>\n<li>If you set the speed to zero the data collection will be displayed \nversus time and will not stop until you click the red \"Stop\" button.</li>\n</ol>\n\n<h2 id=\"installation\">Installation</h2>\n\n<h3 id=\"os-setup-ubuntu-on-pi\"><em>OS setup - Ubuntu on Pi</em></h3>\n\n<p>By default in Ubuntu 20.04 for Pis the gpio and spi groups do not exist.\nThe i2c group does (not always).</p>\n\n<ol>\n<li>Make sure that the following packages are installed <code>rpi.gpio-common \npython3-pigpio python3-gpiozero python3-rpi.gpio</code>.</li>\n<li>You can avoid having to create a gpio group, by assigning users who need\n gpio access to the dialout group. Check that /dev/gpiomem is part of that \ngroup and that the dialout group has rw access. If not you will need to set\n it.</li>\n<li>Users also need to be members of the i2c group. If it does not exist create \n it and then make that the group for /dev/i2c-1 with group rw permissions. \nTHIS MAY NOT BE NECESSARY. </li>\n<li>The spi group needs to be created (addgroup?).</li>\n<li>Additionally the spi group needs to be given rw access to the spi devices\nat each boot. To do this create a one line rule in a file named \n<code>/etc/udev/rules.d/50-spidev.rules</code> containing <code>SUBSYSTEM==\"spidev\", \nGROUP=\"spi\", MODE=\"0660\"</code>. The file should have rw permission for root \nand read permission for everyone else.</li>\n<li>Make sure you have <a href=\"https://pip.pypa.io/en/stable/\">pip</a> installed for \npython 3: <code>python3 -m pip --version</code> or <code>pip3 --version</code>. If you do not, \ninstall using <code>apt \ninstall python3-pip</code>.</li>\n</ol>\n\n<h3 id=\"trough-software-installation\"><em>Trough Software Installation</em></h3>\n\n<p>To avoid library conflicts the software should be installed into a <a href=\"https://docs.python.org/3/tutorial/venv.html?highlight=virtual%20environments\">virtual environment</a>.\nInstructions for doing this using <a href=\"https://pipenv.pypa.io/en/latest/\">pipenv</a>\nfollow.</p>\n\n<p>Log into your chosen user account:</p>\n\n<ol>\n<li>Install <a href=\"https://pipenv.pypa.io/en/latest/\">pipenv</a>: <code>pip3 install \n--user pipenv</code>. You may\nneed to add <code>~/.local/bin</code> to your <code>PATH</code> to make <code>pipenv</code>\navailable in your command shell. More discussion: \n<a href=\"https://docs.python-guide.org/dev/virtualenvs/\">The Hitchhiker's Guide to\nPython</a>.</li>\n<li>Create a directory for the virtual environment you will be installing\ninto (example: <code>$ mkdir Trough</code>).</li>\n<li>Navigate into the directory <code>$ cd Trough</code>.</li>\n<li>Create the virtual environment and enter it <code>$ pipenv shell</code>. To get out of\nthe environment you can issue the <code>$ exit</code> command on the command line.</li>\n<li>While still in the shell install the latest trough software and all its\nrequirements\n  <code>$ pip install -U langmuir_trough</code>.</li>\n<li>Still within the environment shell test\nthis by starting jupyter <code>$ jupyter notebook</code>. Jupyter should launch in your \nbrowser.\n<ol>\n<li>Open a new notebook using the default (Python 3) kernel.</li>\n<li>In the first cell import the Trough_GUI: \n<code>from Trough import Trough_GUI</code>.\n When run this cell sets things up and tries to talk to the trough.</li>\n</ol></li>\n<li>If you wish, you can make this environment available to an alternate Jupyter\ninstall as a special kernel when you are the user.\n<ol>\n<li>Make sure you are running in your virtual environment <code>$ pipenv shell</code> \nin the directory for  virtual environment will do that.</li>\n<li>Issue the command to add this as a kernel to your personal space: \n<code>$ python -m ipykernel install --user --name=&lt;name-you-want-for-kernel&gt;</code>.</li>\n<li>More information is available in the Jupyter/Ipython documentation. \nA simple tutorial from Nikolai Jankiev (_Parametric Thoughts_) can be\nfound <a href=\"https://janakiev.com/til/jupyter-virtual-envs/\">here</a>. </li>\n</ol></li>\n</ol>\n\n<h2 id=\"change-log\">Change Log</h2>\n\n<ul>\n<li>0.7.0 (Apr. 28, 2023)\n<ul>\n<li>Added Access to <a href=\"https://jupyterphysscilab.github.io/jupyter_Pandas_GUI\">pandas_GUI</a>\ntools as <code>Trough_GUI.newPlot()</code>, <code>Trough_GUI.newFit()</code> and \n<code>Trough_GUI.newCalculatedColumn()</code>.</li>\n<li>BUG_FIX: Opening a new notebook and importing Trough_GUI no longer \nclobbers an already running notebook that is talking to the trough \nA-to-D hardware.</li>\n<li>BUG_FIX: Stopping a data collection run now makes sure the barriers are \nstopped.</li>\n</ul></li>\n<li>0.6.0 (Mar. 29, 2023)\n<ul>\n<li>Documentation updates including Gutow Lab Standard Operating Procedures \n(SOPs).</li>\n<li>Refactored everything to inside the module <code>Trough</code>.</li>\n</ul></li>\n<li>0.5.2 (Mar. 16, 2023) Now works in Jupyter Lab.\n<ul>\n<li>Adjusted widget updating/clearing to work in Jupyter lab.</li>\n<li>Added JupyterLab &gt;= 3.6.1 to requirements.</li>\n</ul></li>\n<li>0.5.1 (Mar. 9, 2023) \n<ul>\n<li>Include <code>spidev</code> package in requirements. </li>\n<li>More details reported when unable to \"find trough\".</li>\n</ul></li>\n<li>0.5.0 (Mar. 4, 2023) First version with working GUI</li>\n<li>0.1.0 First pypi compatible package version.</li>\n</ul>\n\n<h2 id=\"known-issues\">Known issues</h2>\n\n<ul>\n<li>0.5.0 - 0.7.0 The estimated error on values converted to metric units \nbased on calibration fits appears to be too pessimistic.</li>\n<li>Inconsistent rendering of Latex ipywidget labels with ipywidgets &gt;= 8.0. \nUntil figured out requiring ipywidgets &lt; 8.0.</li>\n<li>Runs don't label graph axes reliably for x-axis units other than cm.</li>\n</ul>\n\n<h2 id=\"development\">Development</h2>\n\n<h3 id=\"coderepositoryhttpsgithubcomgutowlangmuir_troughgit-docshttpsgutowgithubiolangmuir_trough\"><a href=\"https://github.com/gutow/Langmuir_Trough.git\">CodeRepository</a> | <a href=\"https://gutow.github.io/Langmuir_Trough\">Docs</a></h3>\n\n<ol>\n<li>For development purposes clone the GIT repository.</li>\n<li>Create the virtual environment to run it in within the development \ndirectory <code>pipenv shell</code>.</li>\n<li>Within the shell pip install for development <code>pip install -e .</code>.</li>\n</ol>\n\n<h3 id=\"constructing-the-documentation\">Constructing the Documentation</h3>\n\n<ol>\n<li>Make sure pdoc is installed and updated in the virtual environment <code>pip \ninstall -U pdoc</code>.</li>\n<li>Update any <code>.md</code> files included in <code>_init_.py</code>.\n<ul>\n<li>Generally URLs should be absolute, not relative.</li>\n</ul></li>\n<li>At the root level run pdoc <code>pdoc --logo-link\nhttps://gutow.github.io/Langmuir_Trough/ --footer-text \"Langmuir_Trough vX.X.X\" \n--math -html -o docs Trough</code> where <code>X.X.X</code> is the version number.</li>\n<li>Because of the way the document building process works the background tasks \nwill be started. <strong>You will have to stop the document build after the \ndocumentation is done building (watch the <code>doc</code> folder) with a <code>^C</code> to \nterminate it.</strong></li>\n</ol>\n\n<h3 id=\"releasing-on-pypi\">Releasing on PyPi</h3>\n\n<p>Proceed only if testing of the build is successful.</p>\n\n<ol>\n<li>Update packaging software <code>pip install -U setuptools wheel twine</code></li>\n<li>Double check the version number in <code>setup.py</code>.</li>\n<li>Rebuild the release: <code>python -m setup sdist bdist_wheel</code>.</li>\n<li>Upload it: <code>python -m twine upload dist/*</code></li>\n<li>Make sure it works by installing it in a clean virtual environment. <code>pip \ninstall -U ...</code>. <strong>Copy the actual link from pypi.org.</strong>\n`. If it does not work, pull the release.</li>\n</ol>\n\n<h3 id=\"ideasthings-to-do\">Ideas/Things to do</h3>\n\n<ul>\n<li>Make more robust by wrapping data collection in <code>try ...</code> so that it can \nexit more gracefully and give up barrier monitoring?</li>\n<li>Add explanation of how to use the barrier watch deamon to prevent barrier \ncrashing if software fails.</li>\n</ul>\n\n<h1 id=\"langmuir-trough-standard-operating-procedures-for-the-gutow-lab\">Langmuir Trough Standard Operating Procedures for the Gutow Lab</h1>\n\n<h2 id=\"initialization\">Initialization</h2>\n\n<ol>\n<li>Check that recirculating temperature controller is connected to the \ntrough. Then turn it on and verify that the temperature is set to what \nyou want. Stabilization time is about 20 minutes for temperatures near \nroom temperature.</li>\n<li>Turn on power to the trough.</li>\n<li>Open a terminal and navigate to the <code>Trough</code> directory of the user \n<code>Trough</code>.</li>\n<li>Activate the trough python environment <code>pipenv shell</code></li>\n<li>Launch Jupyter Lab <code>jupyter lab</code>.</li>\n<li>Within Jupyter Lab create a new folder for the Day. Name it something \nlike \"DescriptiveWord_MMM_DD_YYYY\", where MMM = three letter month \nabbreviation, DD = day of the month and YYYY = the year.</li>\n<li>Open the folder by clicking on it.</li>\n<li>Open a new Notebook. Give it a descriptive name.</li>\n<li>In the first cell run the command <code>from Trough import Trough_GUI</code>. If the \ntrough has not been started in the last 12 hours this will take a while \nas it checks the motor calibration for moving the barriers.</li>\n</ol>\n\n<h2 id=\"checking-trough-and-subphase-cleanliness\">Checking Trough and Subphase Cleanliness</h2>\n\n<p><strong>This need to be done before each experiment.</strong></p>\n\n<ol>\n<li>We usually use high-purity water as the subphase. Primarily this is \n18+ M&Omega; de-ionized water mixed with KMnO<sub>4</sub> and redistilled.\nDepending on the status of the water polishers, it is sometimes possible \nto use 18+ M&Omega; water from these directly.</li>\n<li>If the trough is already filled with subphase (1 - 1.5 mm above trough \nedges) and the Wilhelmy plate is installed skip steps 3 - 6.</li>\n<li><a href=\"#calibrating-the-wilhelmy-balance\">Calibrate the Wilhelmy balance</a>\nif necessary.</li>\n<li>Hang a clean filter paper Wilhelmy plate from a fine wire on the balance. \nMake sure that you know the circumference of the plate in mm. This should be \nrecorded in the Jupyter Notebook you are running. Our default \ncircumference is 21.5 mm.</li>\n<li>The subphase should fill the trough so that it rises 1 - 1.5 mm above the \nedges of the trough. To add subphase use the clean glass funnel in the trough \nisolation box to pour through (pouring directly from a bottle splashes). \nThe funnel makes it much easier to add subphase when the polycarbonate lid \nwith just a small opening is in use. Always add subphase between the \nbarriers to trap any surface active species between them for easier removal.</li>\n<li>Adjust the height of the Wilhelmy balance so the plate is partially \nsubmerged in the subphase. The balance settling time is long. You will \nhave to wait at least 1 minute before any measurements will be valid. \nWith a reasonably clean trough and subphase the unzeroed balance should \nsettle to a surface pressure &lt; 10 mN/m. If it does not or shows no noise, \nthere may be a problem.</li>\n<li>If necessary <a href=\"#initialization\">initialize the trough</a> then start the \ntrough control and calibration tool by running the command \n<code>Trough_GUI.Controls(Trough_GUI.calibrations)</code> in an empty cell of the \nnotebook.</li>\n<li>Expand the \"Manual Barrier Control\" accordian. Set the direction to \n\"open\". Set the speed to maximum (~10 cm/min). Click the start button. \nWatch the surface pressure indicator. When the barriers stop (~12.7 cm \nseparation), wait to make sure the surface pressure has stabilized.</li>\n<li>Switch the direction to \"close\". Set the speed to the maximum closing \nspeed (~6.8 cm/min). Click the start button. Watch the surface pressure \nindicator.</li>\n<li>Once the barriers are fully closed (~2.8 cm separation), check the \nsurface pressure. If it is greater than it was when fully open carefully \naspirate the surface between the barriers without catching the Wilhelmy \nplate until the surface pressure is slightly less than observed for the \nopen barriers.</li>\n<li>Repeat steps 8 - 10 up to 4X to get the surface clean. If it is still \nnot clean:\n<ol>\n<li>Raise the Wilhelmy balance carefully and rotate it aside. Make \nsure to lock it in place.</li>\n<li>Remove the polycarbonate lid if it is in place. Store it so that it \ndoes not get contaminated.</li>\n<li>Aspirate all the subphase out of the trough and try again.</li>\n</ol></li>\n<li>If after a second try the trough and subphase are still not clean the \n<a href=\"#cleaning-the-trough\">trough probably needs to be cleaned</a>.</li>\n<li>When it appears clean test:\n<ol>\n<li>Manually open the barriers all the way.</li>\n<li>Set up a run by executing the command \n<code>Trough_GUI.Collect_Data.Run(\"XXX\")</code>, where XXX is replaced with a \nname for the run (e.g. \"clean_test_MMM_DD_YYYYa\") in an empty cell.</li>\n<li>Set the units to cm separation. Set the speed to 1 cm/min. Set the \nfinal separation to the minimum for the trough (~2.86 cm).</li>\n<li>When the surface pressure is stable click on the \"zero pressure\" \nbutton to tare the Wilhelmy balance.</li>\n<li>Click start. The run will stop when the barriers reach the target \nseparation. You can also stop the collection by clicking the \"stop\" \nbutton.</li>\n<li><strong>If the surface pressure stays between -0.2 and +0.2 mN/m the trough \nis adequately clean.</strong></li>\n</ol></li>\n</ol>\n\n<h2 id=\"storage-of-trough-between-runs\">Storage of Trough Between Runs</h2>\n\n<ul>\n<li>If the trough is being used regularly (1X/week or more): store the trough \nwith clean subphase in it. If the subphase is water make sure that the \nhumidification beaker in the isolation box is kept about 50% full.</li>\n<li>If the trough will be unused for a significant time:\n<ol>\n<li><a href=\"#checking-trough-and-subphase-cleanliness\">After verifying the trough and subphase cleanliness</a>\naspirate off all the subphase.</li>\n<li>Empty the humidification beaker.</li>\n<li>Cover the trough with the polycarbonate lid.</li>\n<li>Make sure the isolation box is closed.</li>\n<li>Make sure the power supply is off.</li>\n<li>Shut down the computer.</li>\n</ol></li>\n</ul>\n\n<h2 id=\"handling-spreading-solvents\">Handling Spreading Solvent(s)</h2>\n\n<p><strong>It is extremely easy to contaminate the solvents with surface active \ncompounds at a level that will ruin experiments</strong></p>\n\n<ul>\n<li>Generally HPLC grade solvents are adequately clean. We most commonly use \nHPLC grade hexanes and absolute ethanol.</li>\n<li>All glassware must be carefully cleaned before using to transfer or \ncontain spreading solvents.\n<ol>\n<li>If unsure of basic cleanliness wash well with soap and water. Rinse \nfive (5) times with warm tap water. Rinse three (3) times with \nde-ionized water.</li>\n<li>Rinse two (2) times with absolute ethanol (10% - 20% container volume per \nrinse).</li>\n<li>Rinse six (6) times with the spreading solvent (10% - 20% container volume \nper rinse).</li>\n</ol></li>\n<li><strong>Do not stick anything into the clean spreading solvent stock bottle.</strong> Get \nsamples to work with by pouring into properly cleaned intermediate containers.</li>\n</ul>\n\n<h2 id=\"checking-spreading-solvent-cleanliness\">Checking Spreading Solvent Cleanliness</h2>\n\n<ol>\n<li>Transfer &lt; 1 mL of spreading solvent to a\n<a href=\"#handling-spreading-solvents\">properly cleaned</a> vial.</li>\n<li><a href=\"#initialization\">Initialize the trough</a> and \n<a href=\"#checking-trough-and-subphase-cleanliness\">verify that the subphase is clean.</a></li>\n<li>Using the \"Manual Barrier Controls\" open the barriers all the way.</li>\n<li>Rinse the positive displacement microdispenser 3X with absolute ethanol \nfrom a TFE squeeze bottle and then 3X with HPLC grade hexanes from a TFE \nsqueeze bottle.</li>\n<li>Rinse with the solvent sample being tested 6X by sucking up 90 &micro;L \nof the solvent sample and dispensing it into a waste beaker.</li>\n<li>Dispense 90 &micro;L of the solvent sample onto the surface between the \nbarriers.</li>\n<li>Allow to evaporate (15 min is adequate for hexanes).</li>\n<li><a href=\"#running-a-compression\">Perform a compression</a> at 1 cm/min from fully \nopen to fully closed.</li>\n<li><strong>The solvent is clean if the surface pressure stays between -0.2 and +0.2 \nmN/m.</strong></li>\n</ol>\n\n<h2 id=\"making-a-spreading-solution\">Making a Spreading Solution</h2>\n\n<p>For most molecules we want to spread about 3.00 X 10<sup>-8</sup> moles of \nmolecules on our trough to get a range of roughly 60 to 15 square Angstroms per \nmolecule during a compression.</p>\n\n<ol>\n<li>The ideal volume to spread is 50 &micro;L of solution. Thus we want a \nconcentration near (3.00 X 10<sup>-8</sup> moles)/(50.0 X 10<sup>-6</sup> L)\n= 6 X 10<sup>-4</sup> M. It is practical to spread anywhere between 20 \nand 90 &micro;L. So, you can adapt to concentrations that vary between 1.00 \nx 10<sup>-3</sup> M and 3.3 X 10<sup>-4</sup> M.</li>\n<li>Ideally your molecule will dissolve in pure hexanes at a concentration of \n6 X 10<sup>-4</sup> M. If it is not soluble you can put a few percent (up \nto 5% v/v) of ethanol in with the hexanes. This solvent mixture works for \nmany surfactants, without significantly impacting the surface tension of \na water subphase.</li>\n<li>Experiments take very little solution, so make as small volumes of \nsolution as possible. Note that you should not try to measure out \nsurfactant in amounts that produce less than three significant figures on \na standard analytical balance (e.g. at least 10 mg, preferably 50 mg or \nmore.) This may mean that you will have to make a stock solution and \ndilute it to get in the correct concentration range.</li>\n<li>All solutions must be made using \n<a href=\"#handling-spreading-solvents\">properly cleaned glassware</a> and spreading \nsolvents that have been\n<a href=\"#checking-spreading-solvent-cleanliness\">verified to be clean.</a> Use \nvolumetric flasks with ground glass stoppers to avoid contamination by \nthe plasticizers found in most polymer caps.</li>\n<li>Because the solvents are very volatile the solutions will not keep long \nin the volumetric flasks with ground glass stoppers. They can be \ntransferred for somewhat longer term storage to sealed brown bottles \nif the bottles are \n<a href=\"#checking-spreading-solvent-cleanliness\">properly washed</a> \nand you have verified that a little solvent stored in the bottle \novernight and shaken <a href=\"#checking-spreading-solvent-cleanliness\">stays clean.</a></li>\n</ol>\n\n<h2 id=\"spreading-a-sample\">Spreading a Sample</h2>\n\n<ol>\n<li>Rinse a small vial 2X with absolute ethanol from a TFE squeeze bottle \nthen 3X with hexanes from a TFE squeeze bottle.</li>\n<li>If you need to use a pipette or funnel (the funnel is a better choice as \nyou are less likely to contaminate the stock spreading solution) to transfer \nthe spreading solution to the vial rinse the pipette or funnel 2X with \nabsolute ethanol from a TFE squeeze bottle and then 3X with hexanes from \na TFE squeeze bottle.</li>\n<li>Rinse the transfer tool with the spreading solution 6X.</li>\n<li>Rinse the vial 6X (10-20% of vial volume) with the spreading solution.</li>\n<li>Use the transfer tool to transfer about 1 mL of the spreading solution to \nthe small vial.</li>\n<li>Set the positive displacement dispenser to the volume you will be \ndispensing.</li>\n<li>Rinse the dispenser 2X with absolute ethanol from a TFE squeeze bottle \nthen 3X with hexanes from a TFE squeeze bottle. Make sure you move the \nplunger through its dispensing motion while doing this.</li>\n<li>When the dispenser is dry, rinse 6X with the spreading solution making \nsure to take up the full amount to be dispensed on each rinse.</li>\n<li>With the <strong>barriers fully open</strong> dispense the spreading solution drop wise \nonto the surface between the barriers. Avoid the Wilhelmy plate.</li>\n<li>Allow time for the solvent to evaporate (~ 15 minutes for hexanes) \nbefore doing a compression.</li>\n</ol>\n\n<h2 id=\"running-a-compression\">Running a Compression</h2>\n\n<ol>\n<li>Trough must first be\n<a href=\"#checking-trough-and-subphase-cleanliness\">verified to be clean</a>.</li>\n<li>Spread the surfactant solution on the trough with the barriers open. \nAllow sufficient time for the solvent to evaporate (~15 min for hexanes). \nThe amount to spread will depend on your target range for area per \nmolecule and the concentration of your solution (10<sup>-4</sup> - \n10<sup>-3</sup> M is typical).</li>\n<li>In a new notebook cell execute the command \n<code>Trough_GUI.Collect_Data.Run(\"XXX\")</code>, where XXX is replaced with a \n    name for the run (e.g. \"CompoundName_MMM_DD_YYYYa\")</li>\n<li>Adjust the moles of molecules to the moles of surfactant you spread. \nAdjust the units to Angstroms squared per molecule. Choose your desired \nfinal target area and compression speed.</li>\n<li>When the solvent is fully evaporated zero the balance.</li>\n<li>Store the settings.</li>\n<li>When ready click the \"Start\" button. The collection will stop when the \ndesired area is reached. You can also stop the run by clicking the \"Stop\" \nbutton.</li>\n</ol>\n\n<h2 id=\"calibrating-the-wilhelmy-balance\">Calibrating the Wilhelmy Balance</h2>\n\n<p><strong>This should be done at the beginning of any day real data is collected</strong></p>\n\n<ol>\n<li>If it is not already running launch the trough control and calibration \ntool by running the command <code>Trough_GUI.Controls(Trough_GUI.calibrations)\n</code> in an empty notebook cell.</li>\n<li>Expand the \"Calibrate Balance\" accordian and follow the on screen \ninstructions.</li>\n</ol>\n\n<h2 id=\"calibrating-barrier-position-and-speed\">Calibrating Barrier Position and Speed</h2>\n\n<p><strong>This only needs to be done if a check of the measured barrier separation \nis off by more than \u00b10.03 mm</strong></p>\n\n<ol>\n<li>If it is not already running launch the trough control and calibration \ntool by running the command <code>Trough_GUI.Controls(Trough_GUI.calibrations)\n</code> in an empty notebook cell.</li>\n<li>Expand the \"Calibrate Barriers\" accordian and follow the on screen \ninstructions.</li>\n</ol>\n\n<h2 id=\"calibrating-the-temperature-probe\">Calibrating the Temperature Probe.</h2>\n\n<p><strong>This is very stable so should not need to be done often</strong></p>\n\n<ol>\n<li>If it is not already running launch the trough control and calibration \ntool by running the command <code>Trough_GUI.Controls(Trough_GUI.calibrations)\n</code> in an empty notebook cell.</li>\n<li>Expand the \"Calibrate Temperature\" accordian and follow the on screen \ninstructions.</li>\n<li>A good source of known temperatures is the thermostat recirculator.</li>\n</ol>\n\n<h2 id=\"cleaning-the-trough\">Cleaning the Trough</h2>\n\n<ol>\n<li>The cleaning solution 1:1 concentrated nitric acid:concentrated sulfuric \nacid is extremely dangerous and also has potential to damage parts of the \ntrough. Do not perform this cleaning procedure until Dr. Gutow has \ncertified you for the process.</li>\n<li>The trough can be powered down during this procedure.</li>\n<li>The Wilhelmy balance should be locked in position out of the way.</li>\n<li>The polycarbonate lid should be removed (store it so that does not get \ncontaminated).</li>\n<li>Fill the trough with the 1:1 concentrated nitric:sulfuric acid solution. \nAllow to sit 10 + minutes.</li>\n<li>While the cleaning solution sits in the trough make sure the aspirator \ntrap is dry.</li>\n<li>Aspirate off the cleaning solution. \n<ul>\n<li>Unless the trough is extremely dirty the collected cleaning \nsolution may be returned to the cleaning solution storage bottle.</li>\n<li>If disposing of the cleaning solution treat it as strong acid waste and \nneutralize properly.</li>\n</ul></li>\n<li>Rinse the trough twice with clean water subphase.</li>\n<li><a href=\"#checking-trough-and-subphase-cleanliness\">Check the cleanliness of the trough</a></li>\n</ol>\n\n<h2 id=\"data-analysis\">Data Analysis</h2>\n\n<p>The data is collected in Jupyter notebooks so that you can use the \n<a href=\"https://jupyterphysscilab.github.io/jupyter_Pandas_GUI\">Pandas_GUI</a> \nanalysis tools or write python code \nto analyze the data sets. When a data set is loaded from file or collected \nusing the command <code>Trough_GUI.Collect_Data.Run(\"Run_Name\")</code> a run is added \nto the list <code>Trough_GUI.runs</code>. Data from a run is stored in its Pandas \nDataframe <code>Trough_GUI.runs[i].df</code>, where <code>i</code> is the zero based index of the run.\nThe <a href=\"https://jupyterphysscilab.github.io/jupyter_Pandas_GUI\">Pandas_GUI</a> \ntools which provide menu access to the data can be run using the commands:</p>\n\n<ul>\n<li>A new plot <code>Trough_GUI.newPlot()</code>.</li>\n<li>Calculate a new column (manipulate a dataset) \n<code>Trough_GUI.newCalculatedColumn()</code>.</li>\n<li>A new fit <code>Trough_GUI.newFit()</code>.</li>\n</ul>\n"}, {"fullname": "Trough.Trough_Control", "modulename": "Trough.Trough_Control", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Trough.Trough_Control.message_utils", "modulename": "Trough.Trough_Control.message_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Trough.Trough_Control.message_utils.extract_messages", "modulename": "Trough.Trough_Control.message_utils", "qualname": "extract_messages", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>datapkg: list\nlist of lists containing trough data bundle, messages in the last list.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>list\nlist of strings consisting of the messages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datapkg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_Control.simulation", "modulename": "Trough.Trough_Control.simulation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Trough.Trough_Control.simulation.simulated_troughctl", "modulename": "Trough.Trough_Control.simulation", "qualname": "simulated_troughctl", "kind": "function", "doc": "<p>Will run as separate process taking in commands through a pipe and\nreturning data on demand through a second pipe.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>CTLPipe: Pipe\n    commands come in on and messages go out on.</p>\n\n<p>DATAPipe: Pipe\n    data is sent out on</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">CTLPipe</span>, </span><span class=\"param\"><span class=\"n\">DATAPipe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_Control.trough_util", "modulename": "Trough.Trough_Control.trough_util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Trough.Trough_Control.trough_util.isnumber", "modulename": "Trough.Trough_Control.trough_util", "qualname": "isnumber", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obj</strong>:  object to be tested</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True is a number.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_Control.trough_util.etol_call", "modulename": "Trough.Trough_Control.trough_util", "qualname": "etol_call", "kind": "function", "doc": "<p>Wrapping a callable object in this function will cause it to be called until\nit either returns without an error or the maximum recursion depth is reached.\nThis should only be used on calls that occasionally return errors because they\nare reading sensors or something like that.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>obj: callable</p>\n\n<p>param: list\n    a list containing the parameters in the function call</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>result: any\n    result of function call</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">param</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_Control.trough_util.pid_exists", "modulename": "Trough.Trough_Control.trough_util", "qualname": "pid_exists", "kind": "function", "doc": "<p>Check whether pid exists in the current process table.\nUNIX only. From this stackoverflow suggestion:\n<a href=\"https://stackoverflow.com/a/6940314\">https://stackoverflow.com/a/6940314</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_Control.trough_util.is_trough_initialized", "modulename": "Trough.Trough_Control.trough_util", "qualname": "is_trough_initialized", "kind": "function", "doc": "<p>Checks for a running Trough process and good connections to it.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\nTRUE if initialized</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_Control.trough_util.init_trough", "modulename": "Trough.Trough_Control.trough_util", "qualname": "init_trough", "kind": "function", "doc": "<p>This initializes the trough control subprocess and creates the pipes to communicate\nwith it.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pipe\ncmdsend: the end of the pipe to sent commands to the trough.</p>\n\n<p>pipe\ndatarcv: the end of the pipe the trough uses to send back data and messages.</p>\n\n<p>Process\nTROUGH: the process handle for the trough.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_Control.trough_util.troughctl", "modulename": "Trough.Trough_Control.trough_util", "qualname": "troughctl", "kind": "function", "doc": "<p>Will run as separate process taking in commands through a pipe and\nreturning data on demand through a second pipe.\nIteration 1, collects data into a fifo and watches barrier position.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>Pipe CTLPipe</strong>:  pipe commands come in on and messages go out on.</li>\n<li><strong>Pipe DATAPipe</strong>:  pipe data is sent out on</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">CTLPipe</span>, </span><span class=\"param\"><span class=\"n\">DATAPipe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI", "modulename": "Trough.Trough_GUI", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Trough.Trough_GUI.newCalculatedColumn", "modulename": "Trough.Trough_GUI", "qualname": "newCalculatedColumn", "kind": "function", "doc": "<p>Uses jupyter-pandas-GUI.new_pandas_column_GUI to provide a GUI expression\ncomposer. This method finds the datasets and launches the GUI.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.newPlot", "modulename": "Trough.Trough_GUI", "qualname": "newPlot", "kind": "function", "doc": "<p>Uses jupyter-pandas-GUI.plot_pandas_GUI to provide a GUI expression\ncomposer. This method finds the datasets and launches the GUI.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.newFit", "modulename": "Trough.Trough_GUI", "qualname": "newFit", "kind": "function", "doc": "<p>Uses jupyter-pandas-GUI.fit_pandas_GUI to provide a GUI expression\ncomposer. This method finds the datasets and launches the GUI.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.Collect_data", "modulename": "Trough.Trough_GUI.Collect_data", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Trough.Trough_GUI.Collect_data.trough_run", "modulename": "Trough.Trough_GUI.Collect_data", "qualname": "trough_run", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Trough.Trough_GUI.Collect_data.trough_run.__init__", "modulename": "Trough.Trough_GUI.Collect_data", "qualname": "trough_run.__init__", "kind": "function", "doc": "<p>Create a new run object</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>id: int\n    0 based index of run in current notebook\nfilename: str\n    String representation of the filename used to store the data,\n    with not type extension. This probably should not contain a path.\ntitle: str\n    User friendly title (suggested default is same as filename).\nunits: str\n    Units for the displayed barrier positions (cm, cm^2 or Ang^2/molec).\ntarget: float\n    Numerical value in units for the targeted final trough area.\nspeed: float\n    Numerical value in units for the speed to move the barriers.\nmoles: float\n    moles of molecules initially spread in the trough.\nplate_circ: float\n    circumference of the Whilhelmy plate in mm.\ndataframe: DataFrame or None\ntimestamp: float or None</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">id</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span>,</span><span class=\"param\">\t<span class=\"n\">title</span>,</span><span class=\"param\">\t<span class=\"n\">units</span>,</span><span class=\"param\">\t<span class=\"n\">target</span>,</span><span class=\"param\">\t<span class=\"n\">speed</span>,</span><span class=\"param\">\t<span class=\"n\">moles</span>,</span><span class=\"param\">\t<span class=\"n\">plate_circ</span>,</span><span class=\"param\">\t<span class=\"n\">dataframe</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "Trough.Trough_GUI.Collect_data.trough_run.from_html", "modulename": "Trough.Trough_GUI.Collect_data", "qualname": "trough_run.from_html", "kind": "function", "doc": "<p>Create a run from an html representation</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>html: str\n    The html to be parsed to create the run object</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>trough_run: trough_run\n    A trough_run object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">html</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.Collect_data.trough_run.run_caption", "modulename": "Trough.Trough_GUI.Collect_data", "qualname": "trough_run.run_caption", "kind": "function", "doc": "<p>Returns an html table with info about the run to use as a caption</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.Collect_data.trough_run.init_collect_control", "modulename": "Trough.Trough_GUI.Collect_data", "qualname": "trough_run.init_collect_control", "kind": "function", "doc": "<p>This initializes the collection control widgets and VBox that\ncontains them. The VBox may be accessed as <code>self.collect_control</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.Collect_data.trough_run.close_collect_control", "modulename": "Trough.Trough_GUI.Collect_data", "qualname": "trough_run.close_collect_control", "kind": "function", "doc": "<p>This closes <code>self.collect_control</code> which also minimizes\nthe objects maintained on the Python side.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.Collect_data.trough_run.to_html", "modulename": "Trough.Trough_GUI.Collect_data", "qualname": "trough_run.to_html", "kind": "function", "doc": "<p>Create an html string representing a run</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.Collect_data.trough_run.write_run", "modulename": "Trough.Trough_GUI.Collect_data", "qualname": "trough_run.write_run", "kind": "function", "doc": "<p>Writes a run file with the base filename <code>run.filename</code> into the\ndirectory specified. If a file with the current name exists\nattempts to make the name unique by appending self.timestamp\nto the filename. Currently only produces\nan html file that is also human-readable. Other file formats may be\navailable in the future through the use of key word arguments.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dirpath:\n    pathlike object or string. Empty string means the current working\n    directory.</p>\n\n<p>kwargs:\n    optional key word arguments for future adaptability</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dirpath</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.Collect_data.Run", "modulename": "Trough.Trough_GUI.Collect_data", "qualname": "Run", "kind": "function", "doc": "<p>This routine creates a GUI for initializing, starting, collecting and\ncompleting a run. If the run has been completed it will simply reload it\nfrom the local datafile.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>run_name: str or Path\nThis should generally be the name for the file the data will be stored in\nwithout a file type extension. Recommend a naming scheme that produces\nUnique filenames, such as <code>Trough_run_&lt;username&gt;_&lt;timestamp&gt;</code>. The file\nname will be <code>run_name.trh.run.html</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.Collect_data.collect_data_updater", "modulename": "Trough.Trough_GUI.Collect_data", "qualname": "collect_data_updater", "kind": "function", "doc": "<p>This is run in a separate thread and will update the figure and\nall status widgets at an interval of 2 seconds or a little longer. While\nthis is running nothing else will be able to talk to the trough.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>trough_lock: threading.lock\n    When acquired this routine will talk to the trough. It is not\n    released until the routine exits to avoid any data loss. It does\n    call the status_widgets updater as often as it can while collecting\n    the data.</p>\n\n<p>cmdsend: Pipe\n    End of Pipe to send commands to the Trough.</p>\n\n<p>datarcv: Pipe\n    End of Pipe to receive data from the Trough.</p>\n\n<p>cals: Trough_GUI.calibrations\n    Used to convert the data to user units.</p>\n\n<p>lastdirection: multiprocessing.Value\n    Of type 'i' to indicate last direction the barriers moved.</p>\n\n<p>run_updater: multiprocessing.Value\n    Of type 'c_bool'. True if this updater should keep running.</p>\n\n<p>updater_running: multiprocessing.Value\n    Of type 'c_bool'. Set to True by this process when it starts\n    and set to False before exiting.</p>\n\n<p>run: trough_run\n    This object contains the live figure and the place to store the data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">trough_lock</span>,</span><span class=\"param\">\t<span class=\"n\">cmdsend</span>,</span><span class=\"param\">\t<span class=\"n\">datarcv</span>,</span><span class=\"param\">\t<span class=\"n\">cals</span>,</span><span class=\"param\">\t<span class=\"n\">lastdirection</span>,</span><span class=\"param\">\t<span class=\"n\">run_updater</span>,</span><span class=\"param\">\t<span class=\"n\">updater_running</span>,</span><span class=\"param\">\t<span class=\"n\">run</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.Collect_data.update_collection", "modulename": "Trough.Trough_GUI.Collect_data", "qualname": "update_collection", "kind": "function", "doc": "<p>Updates the graph and the data storage</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datapkg</span>, </span><span class=\"param\"><span class=\"n\">cals</span>, </span><span class=\"param\"><span class=\"n\">lastdirection</span>, </span><span class=\"param\"><span class=\"n\">run_updater</span>, </span><span class=\"param\"><span class=\"n\">updater_running</span>, </span><span class=\"param\"><span class=\"n\">run</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.Monitor_Calibrate", "modulename": "Trough.Trough_GUI.Monitor_Calibrate", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Trough.Trough_GUI.Monitor_Calibrate.Monitor_Setup_Trough", "modulename": "Trough.Trough_GUI.Monitor_Calibrate", "qualname": "Monitor_Setup_Trough", "kind": "function", "doc": "<p>This produces a user interface in jupyter notebooks using ipywidgets. The\ninterface allows monitoring of the trough barrier positions, balance\nsignal, and temperature signal. The barrier positions can be\nadjusted using this interface. Calibrations of all the signals are\nperformed using this interface.</p>\n\n<p>Calibrations are stored in the calibration files in the .Trough/calibrations\ndirectory of the current user. The latest file is used. If none exists\none is created using default parameters. Users should calibrate all\nsignals before using the trough.</p>\n\n<p>NOTE: some objects used here are global and created by importing from\nstatus_widgets.py and command_widgets.py.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>calibrations: Calibrations\n    The object containing the calibrations be used and modified. See\n    <code>Trough_GUI.calibration_utils</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">calibrations</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.calibration_utils", "modulename": "Trough.Trough_GUI.calibration_utils", "kind": "module", "doc": "<p>Utilities for:</p>\n\n<ul>\n<li>writing and reading calibration files stored in the local\nuser directory <code>.Trough/calibrations</code>.</li>\n<li>fitting calibration data to generate calibration parameters.</li>\n<li>converting between raw signal and user-friendly values.</li>\n</ul>\n"}, {"fullname": "Trough.Trough_GUI.calibration_utils.Calibration", "modulename": "Trough.Trough_GUI.calibration_utils", "qualname": "Calibration", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Trough.Trough_GUI.calibration_utils.Calibration.__init__", "modulename": "Trough.Trough_GUI.calibration_utils", "qualname": "Calibration.__init__", "kind": "function", "doc": "<p>Defines a calibration of type <code>name</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name: str\n    calibration name.</p>\n\n<p>units: str\n    string representation of the units the calibration yields.</p>\n\n<p>timestamp: float\n    Unix floating point timestamp.</p>\n\n<p>param:list\n    list of the numerical parameters for the fit yielding the\n    calibration.</p>\n\n<p>param_stdev: list\n    list of the numerical values for the estimated standard\n    deviation of the parameters from the fit.\nparam_inv: list\n    list of the numerical values for the fit (or equation) yielding the\n    inverse of the calibration (return to the raw value).\nparam_inv_stdev: list\n    list of the numerical values for the estimated standard deviation of\n    the parameters for the inversion.\ncal_data_x: list\n    x-data used for the calibration fit.</p>\n\n<p>cal_data_y: list\n    y-data used for the calibration fit.</p>\n\n<p>fit_type: str\n    string name for the fit type. Defaults to \"polynomial\"</p>\n\n<p>fit_eqn_str: str\n    string representation of the fit equation. Defaults to\n    \"y = C0 + C1<em>x + C2</em>x<em>x + C3</em>x<em>x</em>x + ...\"</p>\n\n<p>fit_ceof_lbls: list\n    list of string labels for the coefficients, which should\n    correlate to symbols in the fit_eqn_str. Defaults to [\"C0\", \"C1\",\n    ...]. Automatically, truncated to the actual number of\n    coefficients determined by the order of the polynomial.</p>\n\n<p>additional_data:dict\n    a dictionary of key:value pairs where the keys are a short\n    descriptive string. They can contain any additional data\n    necessary for doing calculations on the data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">units</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span>,</span><span class=\"param\">\t<span class=\"n\">param</span>,</span><span class=\"param\">\t<span class=\"n\">param_stdev</span>,</span><span class=\"param\">\t<span class=\"n\">param_inv</span>,</span><span class=\"param\">\t<span class=\"n\">param_inv_stdev</span>,</span><span class=\"param\">\t<span class=\"n\">cal_data_x</span>,</span><span class=\"param\">\t<span class=\"n\">cal_data_y</span>,</span><span class=\"param\">\t<span class=\"n\">fit_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;polynomial&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fit_eqn_str</span><span class=\"o\">=</span><span class=\"s1\">&#39;y = C0 + C1*x + C2*x*x + C3*x*x*x + ...&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fit_ceof_lbls</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;C0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C3&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C4&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C5&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C6&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C7&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">additional_data</span><span class=\"o\">=</span><span class=\"p\">{}</span></span>)</span>"}, {"fullname": "Trough.Trough_GUI.calibration_utils.Calibration.cal_from_html", "modulename": "Trough.Trough_GUI.calibration_utils", "qualname": "Calibration.cal_from_html", "kind": "function", "doc": "<p>This takes in an html str, parses it and returns a new\ncalibration.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>html: str\n    The html to be parsed to create the calibration object</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>calibration: calibration\n    a calibration object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">html</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.calibration_utils.Calibration.cal_to_html", "modulename": "Trough.Trough_GUI.calibration_utils", "qualname": "Calibration.cal_to_html", "kind": "function", "doc": "<p>This routine creates an html str that would be human-readable in a\nbrowser detailing the calibration. This can be written to a file to\nstore the calibration.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>calib_div: str\n    string containing the html detailing the calibration.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.calibration_utils.Calibration.cal_apply", "modulename": "Trough.Trough_GUI.calibration_utils", "qualname": "Calibration.cal_apply", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">stdev</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.calibration_utils.Calibration.cal_inv", "modulename": "Trough.Trough_GUI.calibration_utils", "qualname": "Calibration.cal_inv", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">stdev</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.calibration_utils.Calibrations", "modulename": "Trough.Trough_GUI.calibration_utils", "qualname": "Calibrations", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Trough.Trough_GUI.calibration_utils.Calibrations.read_cal", "modulename": "Trough.Trough_GUI.calibration_utils", "qualname": "Calibrations.read_cal", "kind": "function", "doc": "<p>This routine reads in a calibration file. If it is the standard\nhtml file it uses <code>calibration.cal_from_html()</code> operation to convert\nit to a calibration.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name: str\n    either the basename (current options: 'balance', 'barriers_open',\n     'barriers_close', 'speed_open', 'speed_close' or\n    'temperature') or a string representation of the path to the\n    calibration file to be read. If one of the basenames is used\n    this code will look for the most recent calibration of that type\n    in the directory '~.Trough\\calibrations'.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Calibration</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.calibration_utils.Calibrations.write_cal", "modulename": "Trough.Trough_GUI.calibration_utils", "qualname": "Calibrations.write_cal", "kind": "function", "doc": "<p>Writes a calibration file with the base filename <code>cal.name + int(\ncal.timestamp)</code> into the directory specified. Currently only produces\nan html file that is also human-readable. Other file formats may be\navailable in the future through the use of key word arguments.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dirpath:\n    pathlike object or string</p>\n\n<p>cal: Calibration\n    a calibration object containing the information about the\n    calibration to write to the file.</p>\n\n<p>kwargs:\n    optional key word arguments for future adaptability</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dirpath</span>, </span><span class=\"param\"><span class=\"n\">cal</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.calibration_utils.Calibrations.poly_fit", "modulename": "Trough.Trough_GUI.calibration_utils", "qualname": "Calibrations.poly_fit", "kind": "function", "doc": "<p>Does a polynomial fit of the specified order using the x and y\nvalues provided.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>data_x: list\n    of numerical x values.</p>\n\n<p>data_y: list\n    of numerical y values.</p>\n\n<p>order: int\n    the order of the polynomical used for fitting.</p>\n\n<p>yerr: float or iterable of float\n    absolute error(s) in the y-value. Used to weight the fit. If no\n    values are provided the assumption is equal weighting.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>param: list\n    of fitted parameters.</p>\n\n<p>param_stdev: list\n    of estimated standard deviation in the parameters.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_x</span>, </span><span class=\"param\"><span class=\"n\">data_y</span>, </span><span class=\"param\"><span class=\"n\">order</span>, </span><span class=\"param\"><span class=\"n\">yerr</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.command_widgets", "modulename": "Trough.Trough_GUI.command_widgets", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Trough.Trough_GUI.command_widgets.on_change_Barr_Units", "modulename": "Trough.Trough_GUI.command_widgets", "qualname": "on_change_Barr_Units", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">change</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.command_widgets.on_change_Barr_Direction", "modulename": "Trough.Trough_GUI.command_widgets", "qualname": "on_change_Barr_Direction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">changed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.command_widgets.on_Barr_Target_change", "modulename": "Trough.Trough_GUI.command_widgets", "qualname": "on_Barr_Target_change", "kind": "function", "doc": "<p>Updates the speed settings since open and close are different.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">change</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.command_widgets.on_click_Start", "modulename": "Trough.Trough_GUI.command_widgets", "qualname": "on_click_Start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">change</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.command_widgets.on_click_Stop", "modulename": "Trough.Trough_GUI.command_widgets", "qualname": "on_click_Stop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">change</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.conversions", "modulename": "Trough.Trough_GUI.conversions", "kind": "module", "doc": "<p>This file contains unit conversion utility functions for use in the GUI</p>\n\n<ul>\n<li>To nest these functions replace the <code>value, err</code> part of the call with\n<code>*func(...)</code>. For example <code>sqcm_to_angpermolec(*cm_to_sqcm(9.2, 0.1, cals),\ncals)</code></li>\n</ul>\n"}, {"fullname": "Trough.Trough_GUI.conversions.cm_to_sqcm", "modulename": "Trough.Trough_GUI.conversions", "qualname": "cm_to_sqcm", "kind": "function", "doc": "<p>convert barrier separation in cm to trough area in sqcm</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">err</span>, </span><span class=\"param\"><span class=\"n\">cals</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.conversions.sqcm_to_cm", "modulename": "Trough.Trough_GUI.conversions", "qualname": "sqcm_to_cm", "kind": "function", "doc": "<p>convert trough area in sqcm to barrier separation in cm</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">err</span>, </span><span class=\"param\"><span class=\"n\">cals</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.conversions.sqcm_to_angpermolec", "modulename": "Trough.Trough_GUI.conversions", "qualname": "sqcm_to_angpermolec", "kind": "function", "doc": "<p>convert trough area in sqcm to square angstroms per molecules</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">err</span>, </span><span class=\"param\"><span class=\"n\">moles</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.conversions.angpermolec_to_sqcm", "modulename": "Trough.Trough_GUI.conversions", "qualname": "angpermolec_to_sqcm", "kind": "function", "doc": "<p>convert trough area in sqcm to square angstroms per molecules</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">err</span>, </span><span class=\"param\"><span class=\"n\">moles</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.conversions.mg_to_mNperm", "modulename": "Trough.Trough_GUI.conversions", "qualname": "mg_to_mNperm", "kind": "function", "doc": "<p>convert balance measurement in mg to milliNewtons per meter</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">err</span>, </span><span class=\"param\"><span class=\"n\">pi_tare</span>, </span><span class=\"param\"><span class=\"n\">plate_circ</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.conversions.nNperm_to_mg", "modulename": "Trough.Trough_GUI.conversions", "qualname": "nNperm_to_mg", "kind": "function", "doc": "<p>convert surface pressure in milliNewtons per meter to mg</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">err</span>, </span><span class=\"param\"><span class=\"n\">pi_tare</span>, </span><span class=\"param\"><span class=\"n\">plate_circ</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.status_widgets", "modulename": "Trough.Trough_GUI.status_widgets", "kind": "module", "doc": "<p>This file contains widgets that display updating trough information and\ncan be used in multiple ipywidget panels within the same notebook.</p>\n"}, {"fullname": "Trough.Trough_GUI.status_widgets.set_zero_pressure", "modulename": "Trough.Trough_GUI.status_widgets", "qualname": "set_zero_pressure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">change</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.status_widgets.update_status", "modulename": "Trough.Trough_GUI.status_widgets", "qualname": "update_status", "kind": "function", "doc": "<p>Call this routine to update the contents of all the status widgets.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>raw_data: dict\n    dictionary of latest raw data values for each\n    sensor and their standard deviation\n    (e.g. {'bal_raw':3.20,'bal_dev':0.005,'barr_raw':0.5,'barr_dev':0.002,\n    'temp_raw':2.24, 'temp_dev':0.01, 'messages':''})</p>\n\n<p>calibrations: Calibrations\n    Object containing the calibrations for the trough (currently\n    <code>.balance</code>, <code>.barriers</code> and <code>.temperature</code>). A call to\n    <code>.balance.cal_apply(raw_data['bal_raw'],raw_data['bal_dev'])</code>\n    will return the balance reading in the calibration units (<code>.balance.units</code>).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">raw_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">calibrations</span>, </span><span class=\"param\"><span class=\"n\">lastdirection</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.status_widgets.status_updater", "modulename": "Trough.Trough_GUI.status_widgets", "qualname": "status_updater", "kind": "function", "doc": "<p>This is run in a separate thread and will update the status widgets\nevery 2 seconds or when it can get access to the pipes to talk to the\ntrough.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>trough_lock: threading.lock\n    When acquired this routine will talk to the trough. Releases it for\n    other processes after every update.</p>\n\n<p>cmdsend: Pipe\n    End of Pipe to send commands to the Trough.</p>\n\n<p>datarcv: Pipe\n    End of Pipe to receive data from the Trough.</p>\n\n<p>cals: Trough_GUI.calibrations\n    Used to convert the data to user units.</p>\n\n<p>lastdirection: multiprocessing.Value\n    Of type 'i' to indicate last direction the barriers moved.</p>\n\n<p>run_updater: multiprocessing.Value\n    Of type 'c_bool'. True if this updater should keep running.</p>\n\n<p>updater_running: multiprocessing.Value\n    Of type 'c_bool'. Set to True by this process when it starts\n    and set to False before exiting.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">trough_lock</span>,</span><span class=\"param\">\t<span class=\"n\">cmdsend</span>,</span><span class=\"param\">\t<span class=\"n\">datarcv</span>,</span><span class=\"param\">\t<span class=\"n\">cals</span>,</span><span class=\"param\">\t<span class=\"n\">lastdirection</span>,</span><span class=\"param\">\t<span class=\"n\">run_updater</span>,</span><span class=\"param\">\t<span class=\"n\">updater_running</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough.Trough_GUI.status_widgets.start_status_updater", "modulename": "Trough.Trough_GUI.status_widgets", "qualname": "start_status_updater", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();