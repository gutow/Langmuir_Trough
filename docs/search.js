window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "Trough_GUI", "modulename": "Trough_GUI", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Trough_GUI.Collect_data", "modulename": "Trough_GUI.Collect_data", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Trough_GUI.Collect_data.trough_run", "modulename": "Trough_GUI.Collect_data", "qualname": "trough_run", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Trough_GUI.Collect_data.trough_run.__init__", "modulename": "Trough_GUI.Collect_data", "qualname": "trough_run.__init__", "kind": "function", "doc": "<p>Create a new run object</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>id: int\n    0 based index of run in current notebook\nfilename: str\n    String representation of the filename used to store the data,\n    with not type extension. This probably should not contain a path.\ntitle: str\n    User friendly title (suggested default is same as filename).\nunits: str\n    Units for the displayed barrier positions (cm, cm^2 or Ang^2/molec).\ntarget: float\n    Numerical value in units for the targeted final trough area.\nspeed: float\n    Numerical value in units for the speed to move the barriers.\nmoles: float\n    moles of molecules initially spread in the trough.\nplate_circ: float\n    circumference of the Whilhelmy plate in mm.\ndataframe: DataFrame or None\ntimestamp: float or None</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">id</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span>,</span><span class=\"param\">\t<span class=\"n\">title</span>,</span><span class=\"param\">\t<span class=\"n\">units</span>,</span><span class=\"param\">\t<span class=\"n\">target</span>,</span><span class=\"param\">\t<span class=\"n\">speed</span>,</span><span class=\"param\">\t<span class=\"n\">moles</span>,</span><span class=\"param\">\t<span class=\"n\">plate_circ</span>,</span><span class=\"param\">\t<span class=\"n\">dataframe</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "Trough_GUI.Collect_data.trough_run.from_html", "modulename": "Trough_GUI.Collect_data", "qualname": "trough_run.from_html", "kind": "function", "doc": "<p>Create a run from an html representation</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>html: str\n    The html to be parsed to create the run object</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>trough_run: trough_run\n    A trough_run object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">html</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.Collect_data.trough_run.run_caption", "modulename": "Trough_GUI.Collect_data", "qualname": "trough_run.run_caption", "kind": "function", "doc": "<p>Returns an html table with info about the run to use as a caption</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.Collect_data.trough_run.init_collect_control", "modulename": "Trough_GUI.Collect_data", "qualname": "trough_run.init_collect_control", "kind": "function", "doc": "<p>This initializes the collection control widgets and VBox that\ncontains them. The VBox may be accessed as <code>self.collect_control</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.Collect_data.trough_run.close_collect_control", "modulename": "Trough_GUI.Collect_data", "qualname": "trough_run.close_collect_control", "kind": "function", "doc": "<p>This closes <code>self.collect_control</code> which also minimizes\nthe objects maintained on the Python side.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.Collect_data.trough_run.to_html", "modulename": "Trough_GUI.Collect_data", "qualname": "trough_run.to_html", "kind": "function", "doc": "<p>Create an html string representing a run</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.Collect_data.trough_run.write_run", "modulename": "Trough_GUI.Collect_data", "qualname": "trough_run.write_run", "kind": "function", "doc": "<p>Writes a run file with the base filename <code>run.filename</code> into the\ndirectory specified. If a file with the current name exists\nattempts to make the name unique by appending self.timestamp\nto the filename. Currently only produces\nan html file that is also human-readable. Other file formats may be\navailable in the future through the use of key word arguments.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dirpath:\n    pathlike object or string. Empty string means the current working\n    directory.</p>\n\n<p>kwargs:\n    optional key word arguments for future adaptability</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dirpath</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.Collect_data.Run", "modulename": "Trough_GUI.Collect_data", "qualname": "Run", "kind": "function", "doc": "<p>This routine creates a GUI for initializing, starting, collecting and\ncompleting a run. If the run has been completed it will simply reload it\nfrom the local datafile.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>run_name: str or Path\nThis should generally be the name for the file the data will be stored in\nwithout a file type extension. Recommend a naming scheme that produces\nUnique filenames, such as <code>Trough_run_&lt;username&gt;_&lt;timestamp&gt;</code>. The file\nname will be <code>run_name.trh.run.html</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">run_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.Collect_data.collect_data_updater", "modulename": "Trough_GUI.Collect_data", "qualname": "collect_data_updater", "kind": "function", "doc": "<p>This is run in a separate thread and will update the figure and\nall status widgets at an interval of 2 seconds or a little longer. While\nthis is running nothing else will be able to talk to the trough.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>trough_lock: threading.lock\n    When acquired this routine will talk to the trough. It is not\n    released until the routine exits to avoid any data loss. It does\n    call the status_widgets updater as often as it can while collecting\n    the data.</p>\n\n<p>cmdsend: Pipe\n    End of Pipe to send commands to the Trough.</p>\n\n<p>datarcv: Pipe\n    End of Pipe to receive data from the Trough.</p>\n\n<p>cals: Trough_GUI.calibrations\n    Used to convert the data to user units.</p>\n\n<p>lastdirection: multiprocessing.Value\n    Of type 'i' to indicate last direction the barriers moved.</p>\n\n<p>run_updater: multiprocessing.Value\n    Of type 'c_bool'. True if this updater should keep running.</p>\n\n<p>updater_running: multiprocessing.Value\n    Of type 'c_bool'. Set to True by this process when it starts\n    and set to False before exiting.</p>\n\n<p>run: trough_run\n    This object contains the live figure and the place to store the data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">trough_lock</span>,</span><span class=\"param\">\t<span class=\"n\">cmdsend</span>,</span><span class=\"param\">\t<span class=\"n\">datarcv</span>,</span><span class=\"param\">\t<span class=\"n\">cals</span>,</span><span class=\"param\">\t<span class=\"n\">lastdirection</span>,</span><span class=\"param\">\t<span class=\"n\">run_updater</span>,</span><span class=\"param\">\t<span class=\"n\">updater_running</span>,</span><span class=\"param\">\t<span class=\"n\">run</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.Collect_data.update_collection", "modulename": "Trough_GUI.Collect_data", "qualname": "update_collection", "kind": "function", "doc": "<p>Updates the graph and the data storage</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datapkg</span>, </span><span class=\"param\"><span class=\"n\">cals</span>, </span><span class=\"param\"><span class=\"n\">lastdirection</span>, </span><span class=\"param\"><span class=\"n\">run_updater</span>, </span><span class=\"param\"><span class=\"n\">updater_running</span>, </span><span class=\"param\"><span class=\"n\">run</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.Monitor_Calibrate", "modulename": "Trough_GUI.Monitor_Calibrate", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Trough_GUI.Monitor_Calibrate.Monitor_Setup_Trough", "modulename": "Trough_GUI.Monitor_Calibrate", "qualname": "Monitor_Setup_Trough", "kind": "function", "doc": "<p>This produces a user interface in jupyter notebooks using ipywidgets. The\ninterface allows monitoring of the trough barrier positions, balance\nsignal, and temperature signal. The barrier positions can be\nadjusted using this interface. Calibrations of all the signals are\nperformed using this interface.</p>\n\n<p>Calibrations are stored in the calibration files in the .Trough/calibrations\ndirectory of the current user. The latest file is used. If none exists\none is created using default parameters. Users should calibrate all\nsignals before using the trough.</p>\n\n<p>NOTE: some objects used here are global and created by importing from\nstatus_widgets.py and command_widgets.py.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>calibrations: Calibrations\n    The object containing the calibrations be used and modified. See\n    <code>Trough_GUI.calibration_utils</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">calibrations</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.calibration_utils", "modulename": "Trough_GUI.calibration_utils", "kind": "module", "doc": "<p>Utilities for:</p>\n\n<ul>\n<li>writing and reading calibration files stored in the local\nuser directory <code>.Trough/calibrations</code>.</li>\n<li>fitting calibration data to generate calibration parameters.</li>\n<li>converting between raw signal and user-friendly values.</li>\n</ul>\n"}, {"fullname": "Trough_GUI.calibration_utils.Calibration", "modulename": "Trough_GUI.calibration_utils", "qualname": "Calibration", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Trough_GUI.calibration_utils.Calibration.__init__", "modulename": "Trough_GUI.calibration_utils", "qualname": "Calibration.__init__", "kind": "function", "doc": "<p>Defines a calibration of type <code>name</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name: str\n    calibration name.</p>\n\n<p>units: str\n    string representation of the units the calibration yields.</p>\n\n<p>timestamp: float\n    Unix floating point timestamp.</p>\n\n<p>param:list\n    list of the numerical parameters for the fit yielding the\n    calibration.</p>\n\n<p>param_stdev: list\n    list of the numerical values for the estimated standard\n    deviation of the parameters from the fit.\nparam_inv: list\n    list of the numerical values for the fit (or equation) yielding the\n    inverse of the calibration (return to the raw value).\nparam_inv_stdev: list\n    list of the numerical values for the estimated standard deviation of\n    the parameters for the inversion.\ncal_data_x: list\n    x-data used for the calibration fit.</p>\n\n<p>cal_data_y: list\n    y-data used for the calibration fit.</p>\n\n<p>fit_type: str\n    string name for the fit type. Defaults to \"polynomial\"</p>\n\n<p>fit_eqn_str: str\n    string representation of the fit equation. Defaults to\n    \"y = C0 + C1<em>x + C2</em>x<em>x + C3</em>x<em>x</em>x + ...\"</p>\n\n<p>fit_ceof_lbls: list\n    list of string labels for the coefficients, which should\n    correlate to symbols in the fit_eqn_str. Defaults to [\"C0\", \"C1\",\n    ...]. Automatically, truncated to the actual number of\n    coefficients determined by the order of the polynomial.</p>\n\n<p>additional_data:dict\n    a dictionary of key:value pairs where the keys are a short\n    descriptive string. They can contain any additional data\n    necessary for doing calculations on the data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">units</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span>,</span><span class=\"param\">\t<span class=\"n\">param</span>,</span><span class=\"param\">\t<span class=\"n\">param_stdev</span>,</span><span class=\"param\">\t<span class=\"n\">param_inv</span>,</span><span class=\"param\">\t<span class=\"n\">param_inv_stdev</span>,</span><span class=\"param\">\t<span class=\"n\">cal_data_x</span>,</span><span class=\"param\">\t<span class=\"n\">cal_data_y</span>,</span><span class=\"param\">\t<span class=\"n\">fit_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;polynomial&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fit_eqn_str</span><span class=\"o\">=</span><span class=\"s1\">&#39;y = C0 + C1*x + C2*x*x + C3*x*x*x + ...&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fit_ceof_lbls</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;C0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C3&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C4&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C5&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C6&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C7&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">additional_data</span><span class=\"o\">=</span><span class=\"p\">{}</span></span>)</span>"}, {"fullname": "Trough_GUI.calibration_utils.Calibration.cal_from_html", "modulename": "Trough_GUI.calibration_utils", "qualname": "Calibration.cal_from_html", "kind": "function", "doc": "<p>This takes in an html str, parses it and returns a new\ncalibration.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>html: str\n    The html to be parsed to create the calibration object</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>calibration: calibration\n    a calibration object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">html</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.calibration_utils.Calibration.cal_to_html", "modulename": "Trough_GUI.calibration_utils", "qualname": "Calibration.cal_to_html", "kind": "function", "doc": "<p>This routine creates an html str that would be human-readable in a\nbrowser detailing the calibration. This can be written to a file to\nstore the calibration.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>calib_div: str\n    string containing the html detailing the calibration.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.calibration_utils.Calibration.cal_apply", "modulename": "Trough_GUI.calibration_utils", "qualname": "Calibration.cal_apply", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">stdev</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.calibration_utils.Calibration.cal_inv", "modulename": "Trough_GUI.calibration_utils", "qualname": "Calibration.cal_inv", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">stdev</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.calibration_utils.Calibrations", "modulename": "Trough_GUI.calibration_utils", "qualname": "Calibrations", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "Trough_GUI.calibration_utils.Calibrations.read_cal", "modulename": "Trough_GUI.calibration_utils", "qualname": "Calibrations.read_cal", "kind": "function", "doc": "<p>This routine reads in a calibration file. If it is the standard\nhtml file it uses <code>calibration.cal_from_html()</code> operation to convert\nit to a calibration.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name: str\n    either the basename (current options: 'balance', 'barriers_open',\n     'barriers_close', 'speed_open', 'speed_close' or\n    'temperature') or a string representation of the path to the\n    calibration file to be read. If one of the basenames is used\n    this code will look for the most recent calibration of that type\n    in the directory '~.Trough\\calibrations'.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Calibration</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.calibration_utils.Calibrations.write_cal", "modulename": "Trough_GUI.calibration_utils", "qualname": "Calibrations.write_cal", "kind": "function", "doc": "<p>Writes a calibration file with the base filename <code>cal.name + int(\ncal.timestamp)</code> into the directory specified. Currently only produces\nan html file that is also human-readable. Other file formats may be\navailable in the future through the use of key word arguments.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dirpath:\n    pathlike object or string</p>\n\n<p>cal: Calibration\n    a calibration object containing the information about the\n    calibration to write to the file.</p>\n\n<p>kwargs:\n    optional key word arguments for future adaptability</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dirpath</span>, </span><span class=\"param\"><span class=\"n\">cal</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.calibration_utils.Calibrations.poly_fit", "modulename": "Trough_GUI.calibration_utils", "qualname": "Calibrations.poly_fit", "kind": "function", "doc": "<p>Does a polynomial fit of the specified order using the x and y\nvalues provided.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>data_x: list\n    of numerical x values.</p>\n\n<p>data_y: list\n    of numerical y values.</p>\n\n<p>order: int\n    the order of the polynomical used for fitting.</p>\n\n<p>yerr: float or iterable of float\n    absolute error(s) in the y-value. Used to weight the fit. If no\n    values are provided the assumption is equal weighting.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>param: list\n    of fitted parameters.</p>\n\n<p>param_stdev: list\n    of estimated standard deviation in the parameters.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_x</span>, </span><span class=\"param\"><span class=\"n\">data_y</span>, </span><span class=\"param\"><span class=\"n\">order</span>, </span><span class=\"param\"><span class=\"n\">yerr</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.command_widgets", "modulename": "Trough_GUI.command_widgets", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Trough_GUI.command_widgets.on_change_Barr_Units", "modulename": "Trough_GUI.command_widgets", "qualname": "on_change_Barr_Units", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">change</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.command_widgets.on_change_Barr_Direction", "modulename": "Trough_GUI.command_widgets", "qualname": "on_change_Barr_Direction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">changed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.command_widgets.on_Barr_Target_change", "modulename": "Trough_GUI.command_widgets", "qualname": "on_Barr_Target_change", "kind": "function", "doc": "<p>Updates the speed settings since open and close are different.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">change</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.command_widgets.on_click_Start", "modulename": "Trough_GUI.command_widgets", "qualname": "on_click_Start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">change</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.command_widgets.on_click_Stop", "modulename": "Trough_GUI.command_widgets", "qualname": "on_click_Stop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">change</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.conversions", "modulename": "Trough_GUI.conversions", "kind": "module", "doc": "<p>This file contains unit conversion utility functions for use in the GUI</p>\n\n<ul>\n<li>To nest these functions replace the <code>value, err</code> part of the call with\n<code>*func(...)</code>. For example <code>sqcm_to_angpermolec(*cm_to_sqcm(9.2, 0.1, cals),\ncals)</code></li>\n</ul>\n"}, {"fullname": "Trough_GUI.conversions.cm_to_sqcm", "modulename": "Trough_GUI.conversions", "qualname": "cm_to_sqcm", "kind": "function", "doc": "<p>convert barrier separation in cm to trough area in sqcm</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">err</span>, </span><span class=\"param\"><span class=\"n\">cals</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.conversions.sqcm_to_cm", "modulename": "Trough_GUI.conversions", "qualname": "sqcm_to_cm", "kind": "function", "doc": "<p>convert trough area in sqcm to barrier separation in cm</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">err</span>, </span><span class=\"param\"><span class=\"n\">cals</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.conversions.sqcm_to_angpermolec", "modulename": "Trough_GUI.conversions", "qualname": "sqcm_to_angpermolec", "kind": "function", "doc": "<p>convert trough area in sqcm to square angstroms per molecules</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">err</span>, </span><span class=\"param\"><span class=\"n\">moles</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.conversions.angpermolec_to_sqcm", "modulename": "Trough_GUI.conversions", "qualname": "angpermolec_to_sqcm", "kind": "function", "doc": "<p>convert trough area in sqcm to square angstroms per molecules</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">err</span>, </span><span class=\"param\"><span class=\"n\">moles</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.conversions.mg_to_mNperm", "modulename": "Trough_GUI.conversions", "qualname": "mg_to_mNperm", "kind": "function", "doc": "<p>convert balance measurement in mg to milliNewtons per meter</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">err</span>, </span><span class=\"param\"><span class=\"n\">pi_tare</span>, </span><span class=\"param\"><span class=\"n\">plate_circ</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.conversions.nNperm_to_mg", "modulename": "Trough_GUI.conversions", "qualname": "nNperm_to_mg", "kind": "function", "doc": "<p>convert surface pressure in milliNewtons per meter to mg</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">err</span>, </span><span class=\"param\"><span class=\"n\">pi_tare</span>, </span><span class=\"param\"><span class=\"n\">plate_circ</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.status_widgets", "modulename": "Trough_GUI.status_widgets", "kind": "module", "doc": "<p>This file contains widgets that display updating trough information and\ncan be used in multiple ipywidget panels within the same notebook.</p>\n"}, {"fullname": "Trough_GUI.status_widgets.set_zero_pressure", "modulename": "Trough_GUI.status_widgets", "qualname": "set_zero_pressure", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">change</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.status_widgets.update_status", "modulename": "Trough_GUI.status_widgets", "qualname": "update_status", "kind": "function", "doc": "<p>Call this routine to update the contents of all the status widgets.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>raw_data: dict\n    dictionary of latest raw data values for each\n    sensor and their standard deviation\n    (e.g. {'bal_raw':3.20,'bal_dev':0.005,'barr_raw':0.5,'barr_dev':0.002,\n    'temp_raw':2.24, 'temp_dev':0.01, 'messages':''})</p>\n\n<p>calibrations: Calibrations\n    Object containing the calibrations for the trough (currently\n    <code>.balance</code>, <code>.barriers</code> and <code>.temperature</code>). A call to\n    <code>.balance.cal_apply(raw_data['bal_raw'],raw_data['bal_dev'])</code>\n    will return the balance reading in the calibration units (<code>.balance.units</code>).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">raw_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">calibrations</span>, </span><span class=\"param\"><span class=\"n\">lastdirection</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.status_widgets.status_updater", "modulename": "Trough_GUI.status_widgets", "qualname": "status_updater", "kind": "function", "doc": "<p>This is run in a separate thread and will update the status widgets\nevery 2 seconds or when it can get access to the pipes to talk to the\ntrough.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>trough_lock: threading.lock\n    When acquired this routine will talk to the trough. Releases it for\n    other processes after every update.</p>\n\n<p>cmdsend: Pipe\n    End of Pipe to send commands to the Trough.</p>\n\n<p>datarcv: Pipe\n    End of Pipe to receive data from the Trough.</p>\n\n<p>cals: Trough_GUI.calibrations\n    Used to convert the data to user units.</p>\n\n<p>lastdirection: multiprocessing.Value\n    Of type 'i' to indicate last direction the barriers moved.</p>\n\n<p>run_updater: multiprocessing.Value\n    Of type 'c_bool'. True if this updater should keep running.</p>\n\n<p>updater_running: multiprocessing.Value\n    Of type 'c_bool'. Set to True by this process when it starts\n    and set to False before exiting.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">trough_lock</span>,</span><span class=\"param\">\t<span class=\"n\">cmdsend</span>,</span><span class=\"param\">\t<span class=\"n\">datarcv</span>,</span><span class=\"param\">\t<span class=\"n\">cals</span>,</span><span class=\"param\">\t<span class=\"n\">lastdirection</span>,</span><span class=\"param\">\t<span class=\"n\">run_updater</span>,</span><span class=\"param\">\t<span class=\"n\">updater_running</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_GUI.status_widgets.start_status_updater", "modulename": "Trough_GUI.status_widgets", "qualname": "start_status_updater", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_Control", "modulename": "Trough_Control", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Trough_Control.message_utils", "modulename": "Trough_Control.message_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Trough_Control.message_utils.extract_messages", "modulename": "Trough_Control.message_utils", "qualname": "extract_messages", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>datapkg: list\nlist of lists containing trough data bundle, messages in the last list.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>list\nlist of strings consisting of the messages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datapkg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_Control.simulation", "modulename": "Trough_Control.simulation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Trough_Control.simulation.simulated_troughctl", "modulename": "Trough_Control.simulation", "qualname": "simulated_troughctl", "kind": "function", "doc": "<p>Will run as separate process taking in commands through a pipe and\nreturning data on demand through a second pipe.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>CTLPipe: Pipe\n    commands come in on and messages go out on.</p>\n\n<p>DATAPipe: Pipe\n    data is sent out on</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">CTLPipe</span>, </span><span class=\"param\"><span class=\"n\">DATAPipe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_Control.trough_util", "modulename": "Trough_Control.trough_util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Trough_Control.trough_util.isnumber", "modulename": "Trough_Control.trough_util", "qualname": "isnumber", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obj</strong>:  object to be tested</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True is a number.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_Control.trough_util.etol_call", "modulename": "Trough_Control.trough_util", "qualname": "etol_call", "kind": "function", "doc": "<p>Wrapping a callable object in this function will cause it to be called until\nit either returns without an error or the maximum recursion depth is reached.\nThis should only be used on calls that occasionally return errors because they\nare reading sensors or something like that.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>obj: callable</p>\n\n<p>param: list\n    a list containing the parameters in the function call</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>result: any\n    result of function call</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">param</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_Control.trough_util.is_trough_initialized", "modulename": "Trough_Control.trough_util", "qualname": "is_trough_initialized", "kind": "function", "doc": "<p>Checks for a running Trough process and good connections to it.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\nTRUE if initialized</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_Control.trough_util.init_trough", "modulename": "Trough_Control.trough_util", "qualname": "init_trough", "kind": "function", "doc": "<p>This initializes the trough control subprocess and creates the pipes to communicate\nwith it.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pipe\ncmdsend: the end of the pipe to sent commands to the trough.</p>\n\n<p>pipe\ndatarcv: the end of the pipe the trough uses to send back data and messages.</p>\n\n<p>Process\nTROUGH: the process handle for the trough.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Trough_Control.trough_util.troughctl", "modulename": "Trough_Control.trough_util", "qualname": "troughctl", "kind": "function", "doc": "<p>Will run as separate process taking in commands through a pipe and\nreturning data on demand through a second pipe.\nIteration 1, collects data into a fifo and watches barrier position.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>Pipe CTLPipe</strong>:  pipe commands come in on and messages go out on.</li>\n<li><strong>Pipe DATAPipe</strong>:  pipe data is sent out on</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">CTLPipe</span>, </span><span class=\"param\"><span class=\"n\">DATAPipe</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();